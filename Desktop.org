#+title: Emacs Desktop Environment
#+property: header-args:emacs-lisp :tangle ./.config/emacs/desktop.el :mkdirp yes

* Table of Contents
:PROPERTIES:
:TOC:      :include all
:END:

:CONTENTS:
- [[#table-of-contents][Table of Contents]]
- [[#window-management][Window Management]]
  - [[#exwm-configuration][EXWM Configuration]]
- [[#desktop-environment][Desktop Environment]]
  - [[#desktop-key-bindings][Desktop Key Bindings]]
  - [[#launcher-script][Launcher Script]]
  - [[#keyboard-configuration][Keyboard Configuration]]
  - [[#polybar][Polybar]]
    - [[#emacs-stuff][Emacs Stuff]]
    - [[#polybar-config][Polybar Config]]
  - [[#notifications-with-dunst][Notifications with Dunst]]
    - [[#emacs-configuration][Emacs Configuration]]
:END:

* Window Management

** EXWM Configuration

#+begin_src emacs-lisp

  (defun av/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

  (defun av/set-wallpaper ()
    (interactive)
    ;; NOTE: You will need to update this to a valid background path!
    (start-process-shell-command
        "nitrogen" nil  "nitrogen --restore"))

  (defun av/exwm-init-hook ()
    ;; Make workspace 1 be the one where we land at startup
    (exwm-workspace-switch-create 1)

    ;; Open eshell by default
    ;;(eshell)

    ;; Polybar
    (av/start-panel)

    ;; Launch apps that will run in the background
    (av/run-in-background "nm-applet")
    (av/run-in-background "xfce4-power-manager")
    (av/run-in-background "dunst"))

  (defun av/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

  (defun av/exwm-update-title ()
    (pcase exwm-class-name
      ("Chromium" (exwm-workspace-rename-buffer (format            exwm-title)))
      ("Vimb"     (exwm-workspace-rename-buffer (format "vimb: %s" exwm-title)))))

  (defun av/configure-window-by-class ()
    (interactive)
    (message "Window '%s' appeared!" exwm-class-name)

    (pcase exwm-class-name
      ("Chromium" (exwm-workspace-move-window 2) )
      ("Vimb"     (exwm-workspace-move-window 2) )
      ("discord"  (exwm-workspace-move-window 6) )
      ("mpv"      (exwm-floating-toggle-floating)
                  (exwm-layout-toggle-mode-line) )))

  (use-package exwm
    :config
    (add-hook 'exwm-update-class-hook #'av/exwm-update-class)

    ;; When window title updates, use it to set the buffer name
    (add-hook 'exwm-update-title-hook #'av/exwm-update-title)

    (add-hook 'exwm-manage-finish-hook #'av/configure-window-by-class)

    ;; When EXWM starts up, do some extra confifuration
    (add-hook 'exwm-init-hook #'av/exwm-init-hook)

    (setq exwm-workspace-number 10)

    (av/set-wallpaper)

    (setq exwm-input-prefix-keys
      '(?\C-x
        ?\C-u
        ?\C-h
        ?\M-x
        ?\M-`
        ?\M-&
        ?\M-:
        ?\C-\M-j
        ?\C-\ ))

    (setq exwm-input-global-keys
          `(
            ([?\s-r] . exwm-reset)
            ([s-left] . windmove-left)
            ([s-right] . windmove-right)
            ([s-up] . windmove-up)
            ([s-down] . windmove-down)
            ([?\s-&] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))
             ([?\s-w] . exwm-workspace-switch)

             ,@(mapcar (lambda (i)
                         `(,(kbd (format "s-%d" i)) .
                           (lambda ()
                             (interactive)
                             (exwm-workspace-switch-create ,i))))
                       (number-sequence 0 9))))

    ;; Automatically move EXWM buffer to current workspace when selected
    (setq exwm-layout-show-all-buffers t)

    ;; Display all EXWM buffers in every workspace buffer list
    (setq exwm-workspace-show-all-buffers t)

    (exwm-input-set-key (kbd "s-SPC") 'counsel-linux-app)
    (exwm-input-set-key (kbd "s-d") 'counsel-linux-app)
    (exwm-input-set-key (kbd "s-f") 'exwm-layout-toggle-fullscreen)

    ;; Remap CapsLock to Ctrl
    (start-process-shell-command "xmodmap" nil "xmodmap ~/.config/emacs/exwm/Xmodmap")

    ;; Enable EXWM
    (exwm-enable))

#+end_src

* Desktop Environment

** Desktop Key Bindings

#+begin_src emacs-lisp

  (use-package desktop-environment
    :after exwm
    :config (desktop-environment-mode)
    :custom
    (desktop-environment-brightness-small-increment "2%+")
    (desktop-environment-brightness-small-decrement "2%-")
    (desktop-environment-brightness-normal-increment "5%+")
    (desktop-environment-brightness-normal-decrement "5%-"))

#+end_src

** Launcher Script

#+begin_src shell :tangle ./.config/emacs/exwm/start-exwm.sh :shebang #!/bin/bash

  picom &

  xss-lock -- slock &

  exec dbus-launch --exit-with-session emacs -mm --debug-init -l ~/.config/emacs/desktop.el

#+end_src

** Keyboard Configuration

#+begin_src sh :tangle ./.config/emacs/exwm/Xmodmap

  clear lock
  clear control
  keycode 66 = Control_L
  add control = Control_L
  add Lock = Control_R

#+end_src

** Polybar

*** Emacs Stuff

#+begin_src emacs-lisp

  ;; Make sure the server is started (better to do this in your main Emacs config!)
  (server-start)

  (defvar av/polybar-process nil
    "Holds the process of the running Polybar instance, if any")

  (defun av/kill-panel ()
    (interactive)
    (when av/polybar-process
      (ignore-errors
        (kill-process av/polybar-process)))
    (setq av/polybar-process nil))

  (defun av/start-panel ()
    (interactive)
    (av/kill-panel)
    (setq av/polybar-process (start-process-shell-command "polybar" nil "polybar -c ~/.config/polybar/config-exwm panel")))

  (defun av/polybar-exwm-workspace ()
    (pcase exwm-workspace-current-index
      (0 "hello")
      (1 "")
      (2 "")
      (3 "")
      (4 "")
      (5 "")
      (6 "")
      (7 "")
      (8 "")
      (9 "")))

  (defun av/send-polybar-hook (module-name hook-index)
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun av/send-polybar-exwm-workspace ()
    (av/send-polybar-hook "exwm-workspace" 1))

  ;; Update panel indicator when workspace changes
  (add-hook 'exwm-workspace-switch-hook #'av/send-polybar-exwm-workspace)

#+end_src

*** Polybar Config

#+begin_src conf :tangle ./.config/polybar/config-exwm

  ; Docs: https://github.com/polybar/polybar
  ;==========================================================

  [settings]
  screenchange-reload = true

  [global/wm]
  margin-top = 0
  margin-bottom = 0

  [colors]
  background = #f0232635
  background-alt = #576075
  foreground = #A6Accd
  foreground-alt = #555
  primary = #ffb52a
  secondary = #e60053
  alert = #bd2c40
  underline-1 = #c792ea

  [bar/panel]
  width = 100%
  height = 25
  offset-x = 0
  offset-y = 0
  fixed-center = true
  enable-ipc = true

  background = ${colors.background}
  foreground = ${colors.foreground}

  line-size = 2
  line-color = #f00

  border-size = 0
  border-color = #00000000

  padding-top = 5
  padding-left = 1
  padding-right = 1

  module-margin = 1

  font-0 = "Cantarell:size=12:weight=bold;2"
  font-1 = "Font Awesome:size=10;2"
  font-2 = "Material Icons:size=15;5"
  font-3 = "Fira Mono:size=10;-3"

  modules-right = cpu temperature battery date
  modules-left  = exwm-workspace

  tray-position = right
  tray-padding = 2
  tray-maxsize = 28

  cursor-click = pointer
  cursor-scroll = ns-resize

  [module/cpu]
  type = internal/cpu
  interval = 2
  format = <label> <ramp-coreload>
  format-underline = ${colors.underline-1}
  click-left = emacsclient -e "(proced)"
  label = %percentage:2%%
  ramp-coreload-spacing = 0
  ramp-coreload-0 = ▁
  ramp-coreload-0-foreground = ${colors.foreground-alt}
  ramp-coreload-1 = ▂
  ramp-coreload-2 = ▃
  ramp-coreload-3 = ▄
  ramp-coreload-4 = ▅
  ramp-coreload-5 = ▆
  ramp-coreload-6 = ▇

  [module/date]
  type = internal/date
  interval = 5

  date = "%a %b %e"
  date-alt = "%A %B %d %Y"

  time = %l:%M %p
  time-alt = %H:%M:%S

  format-prefix-foreground = ${colors.foreground-alt}
  format-underline = ${colors.underline-1}

  label = %date% %time%

  [module/battery]
  type = internal/battery
  battery = BAT0
  adapter = ADP1
  full-at = 98
  time-format = %-l:%M

  label-charging = %percentage%% / %time%
  format-charging = <animation-charging> <label-charging>
  format-charging-underline = ${colors.underline-1}

  label-discharging = %percentage%% / %time%
  format-discharging = <ramp-capacity> <label-discharging>
  format-discharging-underline = ${self.format-charging-underline}

  format-full = <ramp-capacity> <label-full>
  format-full-underline = ${self.format-charging-underline}

  ramp-capacity-0 = 
  ramp-capacity-1 = 
  ramp-capacity-2 = 
  ramp-capacity-3 = 
  ramp-capacity-4 = 

  animation-charging-0 = 
  animation-charging-1 = 
  animation-charging-2 = 
  animation-charging-3 = 
  animation-charging-4 = 
  animation-charging-framerate = 750

  [module/temperature]
  type = internal/temperature
  thermal-zone = 0
  warn-temperature = 60

  format = <label>
  format-underline = ${colors.underline-1}
  format-warn = <label-warn>
  format-warn-underline = ${self.format-underline}

  label = %temperature-c%
  label-warn = %temperature-c%!
  label-warn-foreground = ${colors.secondary}

  [module/exwm-workspace]
  type = custom/ipc
  hook-0 = emacsclient -e "(av/polybar-exwm-workspace)" | sed -e 's/^"//' -e 's/"$//'
  initial = 1
  format-underline = ${colors.underline-1}
  format-padding = 1

#+end_src

** Notifications with Dunst

#+begin_src conf :tangle ./.config/dunst/dunstrc :mkdirp yes

  [global]
  ### Display ###
  monitor = 0

  # The geometry of the window:
  #   [{width}]x{height}[+/-{x}+/-{y}]
  geometry = "250x5-5+25"

  # Show how many messages are currently hidden (because of geometry).
  indicate_hidden = yes

  # Shrink window if it's smaller than the width.  Will be ignored if
  # width is 0.
  shrink = no

  # The transparency of the window.  Range: [0; 100].
  transparency = 10

  # The height of the entire notification.  If the height is smaller
  # than the font height and padding combined, it will be raised
  # to the font height and padding.
  notification_height = 0

  # Draw a line of "separator_height" pixel height between two
  # notifications.
  # Set to 0 to disable.
  separator_height = 1
  separator_color = frame

  # Padding between text and separator.
  padding = 4 

  # Horizontal padding.
  horizontal_padding = 4

  # Defines width in pixels of frame around the notification window.
  # Set to 0 to disable.
  frame_width = 1

  # Defines color of the frame around the notification window.
  frame_color = "#89AAEB"

  # Sort messages by urgency.
  sort = yes

  # Don't remove messages, if the user is idle (no mouse or keyboard input)
  # for longer than idle_threshold seconds.
  idle_threshold = 20

  ### Text ###

  font = Fira Code 15

  # The spacing between lines.  If the height is smaller than the
  # font height, it will get raised to the font height.
  line_height = 0
  markup = full

  # The format of the message.  Possible variables are:
  #   %a  appname
  #   %s  summary
  #   %b  body
  #   %i  iconname (including its path)
  #   %I  iconname (without its path)
  #   %p  progress value if set ([  0%] to [100%]) or nothing
  #   %n  progress value if set without any extra characters
  #   %%  Literal %
  # Markup is allowed
  format = "<b>%s</b>\n%b"

  # Alignment of message text.
  # Possible values are "left", "center" and "right".
  alignment = left

  # Show age of message if message is older than show_age_threshold
  # seconds.
  # Set to -1 to disable.
  show_age_threshold = 60

  # Split notifications into multiple lines if they don't fit into
  # geometry.
  word_wrap = yes

  # When word_wrap is set to no, specify where to make an ellipsis in long lines.
  # Possible values are "start", "middle" and "end".
  ellipsize = middle

  # Ignore newlines '\n' in notifications.
  ignore_newline = no

  # Stack together notifications with the same content
  stack_duplicates = true

  # Hide the count of stacked notifications with the same content
  hide_duplicate_count = false

  # Display indicators for URLs (U) and actions (A).
  show_indicators = yes

  ### Icons ###

  # Align icons left/right/off
  icon_position = left

  # Scale larger icons down to this size, set to 0 to disable
  max_icon_size = 44

  icon_path = /usr/share/icons/gnome/256x256/status:/usr/share/icons/gnome/256x256/devices:/usr/share/icons/gnome/256x256/emblems

  ### History ###

  # Should a notification popped up from history be sticky or timeout
  # as if it would normally do.
  sticky_history = no

  # Maximum amount of notifications kept in history
  history_length = 20

  ### Misc/Advanced ###

  # Browser for opening urls in context menu.
  browser = chromium

  # Always run rule-defined scripts, even if the notification is suppressed
  always_run_script = true

  # Define the title of the windows spawned by dunst
  title = Dunst

  # Define the class of the windows spawned by dunst
  class = Dunst

  startup_notification = false
  verbosity = mesg

  # Define the corner radius of the notification window
  # in pixel size. If the radius is 0, you have no rounded
  # corners.
  # The radius will be automatically lowered if it exceeds half of the
  # notification height to avoid clipping text and/or icons.
  corner_radius = 4

  mouse_left_click = close_current
  mouse_middle_click = do_action
  mouse_right_click = close_all

  # Experimental features that may or may not work correctly. Do not expect them
  # to have a consistent behaviour across releases.
  [experimental]
  # Calculate the dpi to use on a per-monitor basis.
  # If this setting is enabled the Xft.dpi value will be ignored and instead
  # dunst will attempt to calculate an appropriate dpi value for each monitor
  # using the resolution and physical size. This might be useful in setups
  # where there are multiple screens with very different dpi values.
  per_monitor_dpi = false

  [shortcuts]

  # Shortcuts are specified as [modifier+][modifier+]...key
  # Available modifiers are "ctrl", "mod1" (the alt-key), "mod2",
  # "mod3" and "mod4" (windows-key).
  # Xev might be helpful to find names for keys.

  # Close notification.
  #close = ctrl+space

  # Close all notifications.
  #close_all = ctrl+shift+space

  # Redisplay last message(s).
  # On the US keyboard layout "grave" is normally above TAB and left
  # of "1". Make sure this key actually exists on your keyboard layout,
  # e.g. check output of 'xmodmap -pke'
  history = ctrl+grave

  # Context menu.
  context = ctrl+shift+period

  [urgency_low]
  # IMPORTANT: colors have to be defined in quotation marks.
  # Otherwise the "#" and following would be interpreted as a comment.
  background = "#222222"
  foreground = "#888888"
  timeout = 10
  # Icon for notifications with low urgency, uncomment to enable
  #icon = /path/to/icon

  [urgency_normal]
  background = "#1c1f26"
  foreground = "#ffffff"
  timeout = 10
  # Icon for notifications with normal urgency, uncomment to enable
  #icon = /path/to/icon

  [urgency_critical]
  background = "#900000"
  foreground = "#ffffff"
  frame_color = "#ff0000"
  timeout = 0
  # Icon for notifications with critical urgency, uncomment to enable
  #icon = /path/to/icon

#+end_src

*** Emacs Configuration

#+begin_src emacs-lisp

  (defun av/dunstctl (command)
    (start-process-shell-command "dunstctl" nil (concat "dunstctl " command)))

  (exwm-input-set-key (kbd "s-n") (lambda () (interactive) (av/dunstctl "history-pop")))
  (exwm-input-set-key (kbd "s-N") (lambda () (interactive) (av/dunstctl "close-all")))

  (defun av/disable-desktop-notifications ()
    (interactive)
    (start-process-shell-command "notify-send" nil "notify-send \"DUNST_COMMAND_PAUSE\""))

  (defun av/enable-desktop-notifications ()
    (interactive)
    (start-process-shell-command "notify-send" nil "notify-send \"DUNST_COMMAND_RESUME\""))

  (defun av/toggle-desktop-notifications ()
    (interactive)
    (start-process-shell-command "notify-send" nil "notify-send \"DUNST_COMMAND_TOGGLE\""))

#+end_src
