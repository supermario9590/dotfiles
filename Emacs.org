#+title: Emacs Config
#+property: header-args:emacs-lisp :tangle .config/emacs/init.el


* Table of Contents
  :PROPERTIES:
  :TOC:      :include all
  :END:
:CONTENTS:
- [[#table-of-contents][Table of Contents]]
- [[#keep-configemacs-clean][Keep .config/emacs Clean]]
- [[#package-management][Package Management]]
- [[#server-mode][Server Mode]]
- [[#keyboard-bindings][Keyboard Bindings]]
  - [[#escape-cancels-all][Escape Cancels All]]
  - [[#lets-be-evil][Let's Be Evil]]
  - [[#keybinding-panel-which-key][Keybinding Panel (which-key)]]
  - [[#simplify-leader-bindings-generalel][Simplify Leader Bindings (general.el)]]
- [[#general-configuration][General Configuration]]
  - [[#user-interface][User Interface]]
  - [[#theme][Theme]]
  - [[#font][Font]]
  - [[#mode-line][Mode Line]]
    - [[#basic-customization][Basic Customization]]
    - [[#doom-modeline][Doom Modeline]]
    - [[#notifications][Notifications]]
    - [[#auto-saving-changed-files][Auto-Saving Changed Files]]
    - [[#auto-reverting-changed-files][Auto-Reverting Changed Files]]
    - [[#ui-toggles][UI Toggles]]
    - [[#highlight-matching-braces][Highlight Matching Braces]]
- [[#editing-configuration][Editing Configuration]]
  - [[#tab-widths][Tab Widths]]
  - [[#use-spaces-instead-of-tabs-for-indentation][Use spaces instead of tabs for indentation]]
  - [[#commenting-lines][Commenting Lines]]
- [[#configuration-files][Configuration Files]]
  - [[#helpers][Helpers]]
  - [[#bindings][Bindings]]
- [[#stateful-keymaps-with-hydra][Stateful Keymaps with Hydra]]
- [[#better-completions-with-ivy][Better Completions with Ivy]]
- [[#set-margins-for-modes][Set Margins for Modes]]
- [[#file-browsing][File Browsing]]
  - [[#dired][Dired]]
- [[#org-mode][Org Mode]]
  - [[#org-configuration][Org Configuration]]
  - [[#automatically-tangle-on-save][Automatically Tangle on Save]]
  - [[#fonts-and-bullets][Fonts and Bullets]]
  - [[#org-file-paths][Org File Paths]]
  - [[#agenda][Agenda]]
  - [[#tags][Tags]]
  - [[#tasks][Tasks]]
  - [[#capture-templates][Capture Templates]]
  - [[#block-templates][Block Templates]]
  - [[#bindings][Bindings]]
  - [[#end-use-package-org-mode][End use-package org-mode]]
  - [[#update-table-of-contents-on-save][Update Table of Contents on Save]]
- [[#development][Development]]
  - [[#git][Git]]
  - [[#projectile][Projectile]]
  - [[#more-helpful-help-pages][More Helpful Help Pages]]
  - [[#productivity][Productivity]]
    - [[#snippets][Snippets]]
    - [[#smart-parens][Smart Parens]]
    - [[#rainbow-delimeters][Rainbow Delimeters]]
    - [[#rainbow-mode][Rainbow Mode]]
- [[#applications][Applications]]
  - [[#binding-prefix][Binding Prefix]]
  - [[#vterm][Vterm]]
- [[#window-management][Window Management]]
  - [[#exwm-configuration][EXWM Configuration]]
:END:

* Keep .config/emacs Clean

  I don’t want a bunch of transient files showing up as untracked in the Git repo so I move them all to another location.

  #+begin_src emacs-lisp
  ;; Keep transient cruft out of ~/.emacs.d/
  (setq user-emacs-directory "~/.cache/emacs/"
        backup-directory-alist `(("." . ,(expand-file-name "backups" user-emacs-directory)))
	url-history-file (expand-file-name "url/history" user-emacs-directory)
	auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-emacs-directory)
	projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-emacs-directory))

  ;; Keep customization settings in a temporary file (thanks Ambrevar!)
  (setq custom-file
        (if (boundp 'server-socket-dir)
            (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)
  #+end_src

* Package Management

  Set up ELPA, MELPA, and Org package repositories and load =use-package= to manage package configuration.

  #+begin_src emacs-lisp
  ;; Initialize package
  (require 'package)
  
  ;; Set sources
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  ;; Initialize sources
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Install use-package
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  ;; Require use-package
  (require 'use-package)
  
  ;; Configure use-package
  (setq use-package-always-ensure t)
  #+end_src

* Server Mode

  Start the Emacs server from this instance so that all =emacsclient= calls are routed here.

  #+begin_src emacs-lisp
  (server-start)
  #+end_src

* Keyboard Bindings

** Escape Cancels All

   #+begin_src emacs-lisp
   (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
   #+end_src

** Let's Be Evil

   Evil Mode gives us Vi-like keybindings for Emacs.

   #+begin_src emacs-lisp
   (use-package evil
     :init
     (setq evil-want-integration t)
     (setq evil-want-keybinding nil)
     (setq evil-want-C-u-scroll t)
     (setq evil-want-C-i-jump nil)
     :config
     (evil-mode 1)
     (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
     (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
     
     ;; Use visual line motions even outside of visual-line-mode buffers
     (evil-global-set-key 'motion "j" 'evil-next-visual-line)
     (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
     
     (evil-set-initial-state 'messages-buffer-mode 'normal)
     (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
   #+end_src

** Keybinding Panel (which-key)

   [[https://github.com/justbur/emacs-which-key][which-key]] gives us a brilliant keybinding panel.

   #+begin_src emacs-lisp
   (use-package which-key
     :init (which-key-mode)
     :config
     (setq which-key-idle-delay 0.3))
   #+end_src

** Simplify Leader Bindings (general.el)

   [[https://github.com/noctuid/general.el][general.el]] is a fantastic library for defining prefixed keybindings, especially in conjunction with Evil modes.

   #+begin_src emacs-lisp
   (use-package general
     :config
     (general-create-definer av/leader-keys
     :keymaps '(normal insert visual emacs)
     :prefix "SPC"
     :global-prefix "C-SPC"))
   #+end_src

* General Configuration

** User Interface

   Clean up Emacs' user interface, make it more minimal.

   #+begin_src emacs-lisp
   ;; Disable startup message
   (setq inhibit-startup-message t)
   
   ;; Disable scrollbar
   (scroll-bar-mode -1)
   
   ;; Disable toolbar
   (tool-bar-mode -1)
   
   ;; Disable menubar
   (menu-bar-mode -1)

   ;; Disable tooltips
   (tooltip-mode -1)
   
   ;; Enable visual bell
   (setq visible-bell t)
   #+end_src

   Improve scrolling.

   #+begin_src emacs-lisp
   (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
   (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
   (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
   (setq scroll-step 1) ;; keyboard scroll one line at a time (setq use-dialog-box nil) ; Disable dialog boxes since they weren't working in Mac OSX
   #+end_src

   Enable line numbers and customize their format.

   #+begin_src emacs-lisp
   ;; Show line numbers except for certain modes
   (column-number-mode)
   (global-display-line-numbers-mode t)
   
   ;; Disable line numbers for some modes
   (dolist (mode '(org-mode-hook
                   erc-mode-hook
                   term-mode-hook
		   shell-mode-hook
                   eshell-mode-hook
                   vterm-mode-hook))
     (add-hook mode (lambda () (display-line-numbers-mode 0))))
   #+end_src

   Don’t warn for large files (shows up when launching videos)

   #+begin_src emacs-lisp
   (setq large-file-warning-threshold nil)
   #+end_src

   Don't warn for symlinked files

   #+begin_src emacs-lisp
   (setq vc-follow-symlinks t)
   #+end_src

** Theme

   I usually try out the different [[https://github.com/hlissner/emacs-doom-themes][DOOM Themes]].

   #+begin_src emacs-lisp
   (use-package doom-themes
     :init (load-theme 'doom-palenight t))
   #+end_src

** Font

   I use the Fira Code font.

   #+begin_src emacs-lisp
   ;; Set default font
   (set-face-attribute 'default nil :font "Fira Code" :height 110)
   
   ;; Set fixed pitch font
   (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height 110)
   
   ;; Set the variable pitch font
   (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 110)
   #+end_src

** Mode Line

*** Basic Customization

    #+begin_src emacs-lisp
    (setq display-time-format "%l:%M %p %b %y"
          display-time-default-load-average nil)

    (display-time-mode 1)
    #+end_src

*** Doom Modeline

    *NOTE*: You must run =M-x RET all-the-icons-install-fonts RET= after installing this package.

    #+begin_src emacs-lisp
    (use-package doom-modeline
      :init (doom-modeline-mode 1))
    #+end_src

*** Notifications

    [[https://github.com/jwiegley/alert][alert]] is a great library for showing notifications from other packages in a variety of ways. For now I just use it to surface desktop notifications from package code.

    #+begin_src emacs-lisp
    (use-package alert
      :commands alert
      :config
      (setq alert-default-style 'notifications))
    #+end_src

*** Auto-Saving Changed Files

    #+begin_src emacs-lisp
    (use-package super-save
      :defer 1
      :diminish super-save-mode
      :config
      (super-save-mode +1)
      (setq super-save-auto-save-when-idle t))
    #+end_src

*** Auto-Reverting Changed Files

    #+begin_src emacs-lisp
    (global-auto-revert-mode 1)
    #+end_src


*** UI Toggles

    #+begin_src emacs-lisp
    (av/leader-keys
      "t" '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "load theme"))
    #+end_src

*** Highlight Matching Braces

    #+begin_src emacs-lisp
    (use-package paren
      :config
      (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
      (show-paren-mode 1))
    #+end_src

* Editing Configuration

** Tab Widths

   Default to an indentation size of 2 spaces since it’s the norm for pretty much every language I use.

   #+begin_src emacs-lisp
   (setq-default tab-width 2)
   (setq-default evil-shift-width tab-width)
   #+end_src

** Use spaces instead of tabs for indentation

   #+begin_src emacs-lisp
   (setq-default indent-tabs-mode nil)
   #+end_src

** Commenting Lines

   #+begin_src emacs-lisp
   (use-package evil-nerd-commenter
     :bind ("M-/" . evilnc-comment-or-uncomment-lines))
   #+end_src

* Configuration Files

** Helpers

   #+begin_src emacs-lisp
   (defun av/org-file-jump-to-heading (org-file heading-title)
     (interactive)
     (find-file (expand-file-name org-file))
     (goto-char (point-min))
     (search-forward (concat "* " heading-title))
     (org-overview)
     (org-reveal)
     (org-show-subtree)
     (forward-line))

   (defun av/org-file-show-headings (org-file)
     (interactive)
     (find-file (expand-file-name org-file))
     (counsel-org-goto)
     (org-overview)
     (org-reveal)
     (org-show-subtree)
     (forward-line))
   #+end_src

** Bindings

   #+begin_src emacs-lisp
   (av/leader-keys
     "c" '(:ignore t :which-key "config files")
     "ce" '(:ingore t :which-key "emacs config")
     "ceb" '((lambda () (interactive) (find-file "~/Emacs.org")) :which-key "open base config"))
   #+end_src

* Stateful Keymaps with Hydra

  #+begin_src emacs-lisp
  (use-package hydra)

  (defhydra hydra-text-scale ()
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finish" :exit t))

  (av/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))
  #+end_src

* Better Completions with Ivy

  I currently use Ivy, Counsel, and Swiper to navigate around files, buffers, and projects super quickly. Here are some workflow notes on how to best use Ivy:

  - While in an Ivy minibuffer, you can search within the current results by using S-Space.
  - To see actions for the selected minibuffer item, use M-o and then press the action’s key.
  - Super useful: Use C-c C-o to open ivy-occur to open the search results in a separate buffer. From there you can click any item to perform the ivy action.

  #+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)	
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :init
    (ivy-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
  #+end_src

* Set Margins for Modes

  #+begin_src emacs-lisp
  (defun av/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . av/org-mode-visual-fill))
  #+end_src

* File Browsing

** Dired

   #+begin_src emacs-lisp
   (use-package dired
     :ensure nil
     :commands (dired dired-jump)
     :bind (("C-x C-j" . dired-jump))
     :custom ((dired-listing-switches "-agho --group-directories-first"))
     :config
     (evil-collection-define-key 'normal 'dired-mode-map
     "h" 'dired-single-up-directory
     "l" 'dired-single-buffer))

   (use-package dired-single)
   
   (use-package all-the-icons-dired
     :hook (dired-mode . all-the-icons-dired-mode))

   (use-package dired-open
     :config
     ;; Doesn't work as expected!
     ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
     (setq dired-open-extensions '(("png" . "feh")
                                   ("mkv" . "mpv"))))

   (use-package dired-hide-dotfiles
     :hook (dired-mode . dired-hide-dotfiles-mode)
     :config
     (evil-collection-define-key 'normal 'dired-mode-map
       "H" 'dired-hide-dotfiles-mode))
   #+end_src

* Org Mode

** Org Configuration

   Set up Org Mode with a baseline configuration. The following sections will add more things to it.

   #+begin_src emacs-lisp
   (defun av/org-mode-setup ()
     (variable-pitch-mode 1)
     (visual-line-mode 1))
   
   (use-package org
     :hook (org-mode . av/org-mode-setup)
     :config
     (setq org-ellipsis " ▾")
     
     (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (java . t)
	 (haskell . t)
	 (shell . t)
	 (python . t)))

   (push '("conf-unix" . conf-unix) org-src-lang-modes)
   #+end_src

** Automatically Tangle on Save

   #+begin_src emacs-lisp
   ;; Since we don't want to disable org-confirm-babel-evaluate all
   ;; of the time, do it around the after-save-hook
   (defun av/org-babel-tangle-dont-ask ()
   ;; Dynamic scoping to the rescue
   (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle)))

   (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'av/org-babel-tangle-dont-ask
                                                 'run-at-end 'only-in-org-mode)))
   #+end_src

** Fonts and Bullets

   #+begin_src emacs-lisp
     ;; Replace list hyphen with dot
     (font-lock-add-keywords 'org-mode
                             '(("^ *\\([-]\\) "
                                 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

     ;; Set faces for heading levels
     (dolist (face '((org-level-1 . 1.2)
                     (org-level-2 . 1.1)
                     (org-level-3 . 1.0)
                     (org-level-4 . 1.0)
                     (org-level-5 . 0.9)
                     (org-level-6 . 0.8)
                     (org-level-7 . 0.7)
                     (org-level-8 . 0.6)))
       (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

     ;; Ensure that anything that should be fixed-pitch in Org files appears that way
     (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
     (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
     (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
     (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
     (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
     (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
     (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
     
     (use-package org-bullets
       :after org
       :hook (org-mode . org-bullets-mode)
       :custom
       (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
   #+end_src

** Org File Paths

   #+begin_src emacs-lisp
   (setq org-agenda-files
	 '("~/Documents/OrgFiles/Tasks.org"
	   "~/Documents/OrgFiles/Events.org"
	   "~/Documents/OrgFiles/Habits.org"))
   #+end_src

** Agenda

   #+begin_src emacs-lisp
   (setq org-agenda-start-with-log-mode t)

   (require 'org-habit)
   (add-to-list 'org-modules 'org-habit)

   ;; Configure custom agenda views
   (setq org-agenda-custom-commands
     '(("d" "Dashboard"
        ((agenda "" ((org-deadline-warning-days 7)))
         (todo "NEXT"
           ((org-agenda-overriding-header "Next Tasks")))
         (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

       ("n" "Next Tasks"
        ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

       ("W" "Work Tasks" tags-todo "+work-email")

       ;; Low-effort next actions
       ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
        ((org-agenda-overriding-header "Low Effort Tasks")
         (org-agenda-max-todos 20)
         (org-agenda-files org-agenda-files)))

       ("w" "Workflow Status"
        ((todo "WAIT"
           ((org-agenda-overriding-header "Waiting on External")
            (org-agenda-files org-agenda-files)))
         (todo "REVIEW"
           ((org-agenda-overriding-header "In Review")
            (org-agenda-files org-agenda-files)))
         (todo "PLAN"
           ((org-agenda-overriding-header "In Planning")
            (org-agenda-todo-list-sublevels nil)
            (org-agenda-files org-agenda-files)))
         (todo "BACKLOG"
           ((org-agenda-overriding-header "Project Backlog")
            (org-agenda-todo-list-sublevels nil)
            (org-agenda-files org-agenda-files)))
         (todo "READY"
           ((org-agenda-overriding-header "Ready for Work")
            (org-agenda-files org-agenda-files)))
         (todo "ACTIVE"
           ((org-agenda-overriding-header "Active Projects")
            (org-agenda-files org-agenda-files)))
         (todo "COMPLETED"
           ((org-agenda-overriding-header "Completed Projects")
            (org-agenda-files org-agenda-files)))
         (todo "CANC"
           ((org-agenda-overriding-header "Cancelled Projects")
            (org-agenda-files org-agenda-files)))))))
   #+end_src

** Tags

   #+begin_src emacs-lisp
   (setq org-tag-alist
     '((:startgroup)
        ; Put mutually exclusive tags here
        (:endgroup)
	("@errand" . ?E)
	("@home" . ?H)
	("@work" . ?W)
	("agenda" . ?a)
	("planning" . ?p)
	("publish" . ?P)
	("batch" . ?b)
	("note" . ?n)
	("idea" . ?i)))
   #+end_src

** Tasks

   #+begin_src emacs-lisp
   (setq org-log-done 'time)
   (setq org-log-into-drawer t)
   (setq org-habit-graph-column 60)
   (setq org-todo-keywords
     '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
       (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))
   #+end_src

** Capture Templates

   #+begin_src emacs-lisp
   (setq org-capture-templates
     `(("t" "Tasks / Projects")
       ("tt" "Task" entry (file+olp "~/Documents/OrgFiles/Tasks.org" "Inbox")
            "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

       ("j" "Journal Entries")
       ("jj" "Journal" entry
            (file+olp+datetree "~/Documents/OrgFiles/Journal.org")
            "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
            ;; ,(av/read-file-as-string "~/Notes/Templates/Daily.org")
            :clock-in :clock-resume
            :empty-lines 1)
       ("jm" "Meeting" entry
            (file+olp+datetree "~/Documents/OrgFiles/Journal.org")
            "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
            :clock-in :clock-resume
            :empty-lines 1)

       ("w" "Workflows")
       ("we" "Checking Email" entry (file+olp+datetree "~/Documents/OrgFiles/Journal.org")
            "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

       ("m" "Metrics Capture")
       ("mw" "Weight" table-line (file+headline "~/Documents/OrgFiles/Metrics.org" "Weight")
        "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))
   #+end_src

** Block Templates

   These templates enable you to type things like =<el= and then hit =Tab= to expand the template. More documentation can be found at the Org Mode [[https://orgmode.org/manual/Easy-templates.html][Easy Templates]] documentation page.

   #+begin_src emacs-lisp
   ;; This is needed as of Org 9.2
   (require 'org-tempo)
   
   (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
   (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
   (add-to-list 'org-structure-template-alist '("py" . "src python"))
   (add-to-list 'org-structure-template-alist '("java" . "src java :classname Java"))
   #+end_src

** Bindings

   #+begin_src emacs-lisp
   (use-package evil-org
     :after org
     :hook ((org-mode . evil-org-mode)
            (org-agenda-mode . evil-org-mode)
            (evil-org-mode . (lambda () (evil-org-set-key-theme '(navigation todo insert textobjects additional)))))
     :config
     (require 'evil-org-agenda)
     (evil-org-agenda-set-keys))
     
     (av/leader-keys
       "o"   '(:ignore t :which-key "org mode")
       
       "oi"  '(:ignore t :which-key "insert")
       "oil" '(org-insert-link :which-key "insert link")
       
       "on"  '(org-toggle-narrow-to-subtree :which-key "toggle narrow")
       
       "os"  '(av/counsel-rg-org-files :which-key "search notes")
       
       "oa"  '(org-agenda :which-key "status")
       "oc"  '(org-capture t :which-key "capture")
       "ox"  '(org-export-dispatch t :which-key "export"))
   #+end_src

** End =use-package org-mode=

   #+begin_src emacs-lisp
   ;; This ends the use-package org mode block
   )
   #+end_src

** Update Table of Contents on Save

   It’s nice to have a table of contents section for long literate configuration files (like this one!) so I use =org-make-toc= to automatically update the ToC in any header with a property named =TOC=.

   #+begin_src emacs-lisp
   (use-package org-make-toc
     :hook (org-mode . org-make-toc-mode))
   #+end_src

* Development

  Configuration for various programming languages and dev tools that I use.

** Git

   I use Magit as a GUI to manage git repositories.

   #+begin_src emacs-lisp
   (use-package magit
     :custom
     (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
   
  (use-package evil-magit
    :after magit)

  (av/leader-keys
    "g"   '(:ignore t :which-key "git")
    "gs"  'magit-status
    "gd"  'magit-diff-unstaged
    "gc"  'magit-branch-or-checkout
    "gl"   '(:ignore t :which-key "log")
    "glc" 'magit-log-current
    "glf" 'magit-log-buffer-file
    "gb"  'magit-branch
    "gP"  'magit-push-current
    "gp"  'magit-pull-branch
    "gf"  'magit-fetch
    "gF"  'magit-fetch-all
    "gr"  'magit-rebase)
   #+end_src

** Projectile

   #+begin_src emacs-lisp
   (use-package projectile
     :init
     (projectile-mode)
     (setq projectile-project-search-path '("~/Documents/Projects/"
					    "~/Documents/pkgs/suckless/"
					    "~/Documents/pkgs/manualbuild/"
					    "~/Documents/Courses/"))
     (setq projectile-switch-project-action #'projectile-dired)
     :custom ((projectile-completion-system 'ivy)))
  
   (use-package counsel-projectile
     :init (counsel-projectile-mode))

   (av/leader-keys
    "p" '(projectile-command-map :which-key "projectile"))
   #+end_src

** More Helpful Help Pages

   #+begin_src emacs-lisp
   (use-package helpful
     :custom
     (counsel-describe-function-function #'helpful-callable)
     (counsel-describe-variable-function #'helpful-variable)
     :bind
     ([remap describe-function] . counsel-describe-function)
     ([remap describe-command] . helpful-command)
     ([remap describe-variable] . counsel-describe-variable)
     ([remap describe-key] . helpful-key))
   #+end_src

** Productivity

*** Snippets

    #+begin_src emacs-lisp
    (use-package yasnippet
      :hook (prog-mode . yas-minor-mode)
      :config
      (yas-reload-all))
    #+end_src

*** Smart Parens

    #+begin_src emacs-lisp
    (use-package smartparens
      :hook (prog-mode . smartparens-mode))
    #+end_src

*** Rainbow Delimeters

    #+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
    #+end_src

*** Rainbow Mode

    Sets the background of HTML color strings in buffers to be the color mentioned.

    #+begin_src emacs-lisp
    (use-package rainbow-mode
      :defer t
      :hook (org-mode
             emacs-lisp-mode
             web-mode
             typescript-mode
             js2-mode))
    #+end_src

* Applications

** Binding Prefix

   #+begin_src emacs-lisp
   (av/leader-keys
     "a" '(:ignore t :which-key "apps"))
   #+end_src

** Vterm

   =vterm= enables the use of fully-fledged terminal applications within Emacs so that I don’t need an external terminal emulator.

   #+begin_src emacs-lisp
   (use-package vterm
     :commands vterm
     :config
     (setq vterm-max-scrollback 10000))
   #+end_src
   
* Window Management
  
** EXWM Configuration
   
   #+begin_src emacs-lisp
   (defun av/exwm-update-class ()
     (exwm-workspace-rename-buffer exwm-class-name))
     
   (use-package exwm
     :config
     ;; Set the default number of workspaces
     (setq exwm-workspace-number 5)
     
     ;; When window "class" updates, use it to set the buffer name
     (add-hook 'exwm-update-class-hook #'av/exwm-update-class)
     
     ;; Rebind CapsLock to Ctrl
     (start-process-shell-command "xmodmap" nil "xmodmap ~/.config/emacs/exwm/Xmodmap")
     
     ;; Start XFCE4 Power Manager
     (start-process-shell-command "xfce4-power-manager" nil "xfce4-power-manager")
     
     ;; These keys should always pass through to Emacs
     (setq exwm-input-prefix-keys
       '(?\C-x
         ?\C-u
         ?\C-h
         ?\M-x
         ?\M-`
         ?\M-&
         ?\M-:
         ?\C-\M-j  ;; Buffer list
         ?\C-\ ))  ;; Ctrl+Space
         
     ;; Ctrl+Q will enable the next key to be sent directly
     (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

     ;; Set up global key bindings.  These always work, no matter the input state!
     ;; Keep in mind that changing this list after EXWM initializes has no effect.
     (setq exwm-input-global-keys
          `(
            ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
            ([?\s-r] . exwm-reset)
            
            ;; Move between windows
            ([s-left] . windmove-left)
            ([s-right] . windmove-right)
            ([s-up] . windmove-up)
            ([s-down] . windmove-down)
            
            ;; Launch applications via shell command
            ([?\s-&] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))
                         
            ;; Switch workspace
            ([?\s-w] . exwm-workspace-switch)
            
            ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                              (exwm-workspace-switch-create ,i))))
                      (number-sequence 0 9))))

    (exwm-enable))
   #+end_src
